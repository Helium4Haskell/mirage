optpragmas {
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric, DeriveAnyClass #-}
}

module {Mirage.AbstractSyntax}
{ Grammar (Grammar)
, Nonterminals
, Nonterminal (Nonterminal)
, Attributes
, Attribute (Attribute)
, Productions
, Production (Production)
, Children
, Child (Child)
, Rules
, Rule (Rule)
, Node (Node)
, Connections
, Connection (Connection)
, LocalsRows
, Locals
}{}

imports {
import           Data.Text                      ( Text )

import           Mirage.CommonTypes

import           Data.Aeson                     ( FromJSON )
import           GHC.Generics
}

type Nonterminals = [Nonterminal]
type Attributes   = [Attribute]
type Productions  = [Production]
type Children     = [Child]
type Rules        = [Rule]

data Grammar
  | Grammar      nonts       :: Nonterminals

data Nonterminal
  | Nonterminal  name        :: Text
                 params      :: {[Text]}
                 inhs        :: {Attributes}
                 syns        :: {Attributes}
                 prods       :: Productions

data Attribute
  | Attribute    name        :: Text
                 tp          :: Type

data Production
  | Production   name        :: Text
                 children    :: Children
                 rules       :: Rules

data Child
  | Child        name        :: Text
                 tp          :: Type

data Rule
  | Rule         targets     :: {[Address]}
                 sources     :: {[Address]}
                 explicit    :: Bool
                 origin      :: String
                 definition  :: Text

deriving * : FromJSON, Generic, Show

-- This belongs to RenderShapes.ag

data Node
  | Node name :: Text
         inhs :: Attributes
         syns :: Attributes 

data Connection
  | Connection source :: Address
               target :: Address
               explicit :: Bool

deriving Connection : Eq, Ord

type LocalsRows   = [Locals]
type Locals       = [Text]
type Connections  = [Connection]
