include "AbstractSyntax.ag"
include "DependencyGraph.ag"

optpragmas
{
{-# LANGUAGE OverloadedStrings #-}
}

module {Mirage.RenderShapes}
{ grammarShapes
, askCairo
, AttrInfo (TargetInfo, SourceInfo)
, targetInfoType
, targetInfoCode
, targetInfoOrigin
, sourceInfoType
, BBTree
, lookupBBTree
}{}

imports
{
import           Data.Text                      ( Text )
import           Data.Map                       ( Map )
import qualified Data.Map                      as Map
import           Data.Set                       ( Set )
import qualified Data.Set                      as Set
import           Graphics.Rendering.Cairo.Internal
                                                ( Render(..)
                                                , Cairo
                                                )
import           Data.Maybe                     ( fromJust
                                                , isJust
                                                )

import           Mirage.Shape
import           Mirage.Cairo
import           Mirage.AbstractSyntax
import           Mirage.CommonTypes

import           System.IO.Unsafe               ( unsafePerformIO )
import           Control.Monad.Trans.Reader
import           Control.Arrow                  ( first
                                                , second
                                                )
import           Data.Monoid                    ( Sum )
import           Control.Applicative            ( Alternative((<|>), empty) )
import Debug.Trace
}

{
data Deps = Deps
  { depsLhs   :: Sum Int
  , depsLoc   :: Sum Int
  , depsChild :: Sum Int
  }

instance Semigroup Deps where
  Deps x1 x2 x3 <> Deps y1 y2 y3
    = Deps (x1 <> y1) (x2 <> y2) (x3 <> y3)

instance Monoid Deps where
  mempty = Deps mempty mempty mempty

mkDeps :: Set Text -> Address -> Deps
mkDeps locs (Address fld attr) = case fld of
  "lhs"                          -> Deps 1 0 0
  "loc" | attr `Set.member` locs -> Deps 0 1 0
  _                              -> Deps 0 0 1

splitDepsHorizontally :: (Deps, Deps) -> Bool
splitDepsHorizontally (Deps lhsIn locIn chldIn, Deps lhsOut locOut chldOut)
  = lhsIn + chldOut > lhsOut + chldIn

splitDepsVerticallyLeft :: (Deps, Deps) -> Bool
splitDepsVerticallyLeft (Deps lhsIn locIn chldIn, Deps lhsOut locOut chldOut)
  = lhsIn + lhsOut + locOut > locIn + chldOut + chldIn

splitDepsVerticallyRight :: (Deps, Deps) -> Bool
splitDepsVerticallyRight (Deps lhsIn locIn chldIn, Deps lhsOut locOut chldOut)
  = lhsOut + lhsIn + locIn > locOut + chldIn + chldOut
}

sem Production
  | Production
      inst.parent :: Node
      inst.parent
        = uncurry (Node "lhs") $ filterAttrs
            ((if @lhs.hideImplicit
                then Set.intersection @rules.activeAttributes
                else id) @lhs.enabledAttrs)
            (fromJust (Map.lookup @lhs.requestedNont @lhs.nontMapInh))

      (loc.leftLocalDeps, loc.rightLocalDeps)
        = Map.partition splitDepsHorizontally @rules.localDeps
      (loc.leftTopLocalDeps, loc.leftBottomLocalDeps)
        = Map.partition splitDepsVerticallyLeft @loc.leftLocalDeps
      (loc.rightTopLocalDeps, loc.rightBottomLocalDeps)
        = Map.partition splitDepsVerticallyRight @loc.rightLocalDeps

      inst.leftLocalsRows :: LocalsRows
      inst.leftLocalsRows
        = [ x
          | x@(_ : _) <-
            [ Map.keys @loc.leftTopLocalDeps
            , Map.keys @loc.leftBottomLocalDeps
            ]
          ]
      inst.rightLocalsRows :: LocalsRows
      inst.rightLocalsRows
        = [ x
          | x@(_ : _) <-
            [ Map.keys @loc.rightTopLocalDeps
            , Map.keys @loc.rightBottomLocalDeps
            ]
          ]

      inst.connections :: Connections
      inst.connections = graphToConnections @rules.dependencyGraph

attr Nonterminal Nonterminals
  syn nontMapSyn use {<>} {mempty} :: {Map Text (Attributes, Attributes)}

sem Nonterminal
  | Nonterminal lhs.nontMapSyn = Map.singleton @name (@inhs, @syns)

sem Grammar
  | Grammar activeProd.nontMapInh = @nonts.nontMapSyn

attr Child Children Production
  inh nontMapInh :: {Map Text (Attributes, Attributes)}

---

-- Active attributes are attributes that are used explicitly at least once in
-- a semantic rule.
attr Rules Rule
  syn activeAttributes use {<>} {mempty} :: {Set Text}

attr Children Child
  inh activeAttributes :: {Set Text}

sem Rule
  | Rule lhs.activeAttributes
    = if @explicit
        then Set.fromList (map (\(Address _ x) -> x) (@sources <> @targets))
        else mempty

sem Production
  | Production children.activeAttributes = @rules.activeAttributes

{
filterAttrs attrs =
  both (filter (\(Attribute name _) -> name `Set.member` attrs))

both :: (a -> b) -> (a, a) -> (b, b)
both f ~(x, y) = (f x, f y)
}

sem Child
  | Child
      inst.node :: Node
      inst.node
        = uncurry (Node @name) $ filterAttrs
            ((if @lhs.hideImplicit
                then Set.intersection @lhs.activeAttributes
                else id) @lhs.enabledAttrs)
            (case @tp of
               NT tp _ -> @lhs.nontMapInh Map.! tp
               _ -> ([], []))

attr Rules Rule
  syn gathLocals      use {<>} {mempty} :: {Set Text}
  inh gatheredLocals :: {Set Text}
  
  syn localDeps  use {Map.unionWith (<>)} {mempty} :: {Map Text (Deps, Deps)}

sem Production
  | Production
      rules.gatheredLocals = @rules.gathLocals

sem Rule
  | Rule
      lhs.gathLocals = Set.fromList [ x | Address "loc" x <- @targets ]
      lhs.localDeps
        = foldr
          (Map.unionWith (<>))
          mempty
          [ (if f2 == "loc" && a2 `Set.member` locs
               then Map.singleton a2 (mempty, mkDeps locs x)
               else mempty
            )
              <> (if f1 == "loc" && a1 `Set.member` locs
                    then Map.singleton a1 (mkDeps locs y, mempty)
                    else mempty
                 )
          | x@(Address f1 a1) <- @targets
          , y@(Address f2 a2) <- @sources
          , let locs = @lhs.gatheredLocals
          ]
          
{
data HorizontalSide = SideLeft | SideRight deriving Eq
data VerticalSide = SideTop | SideBottom deriving Eq

data NodeRole = NodeRoleParent | NodeRoleChild deriving Eq
}

{
askCairo :: Render Cairo
askCairo = Render ask

-- This function is mostly safe, the value can change slightly due to hinting if
-- the transformation matrix is changed. We do not change the transformation
-- matrix, so for our use this function should be completely safe.
--
-- To quote from the online cairo documentation:
--
--   Because text extents are in user-space coordinates, they are mostly, but
--   not entirely, independent of the current transformation matrix.
--   [..]
--   They will change slightly due to hinting (so you can't assume that metrics
--   are independent of the transformation matrix), but otherwise will remain
--   unchanged.
textExtents :: Cairo -> FontOptions -> Text -> TextExtents
textExtents cairo font txt = unsafePerformIO $
  runReaderT (runRender (mirageTextExtents font txt)) cairo
}

attr Grammar Nonterminals Nonterminal Productions Production Children Child
     LocalsRows Locals Attributes Attribute Node
  inh nodeFont        :: FontOptions
  inh nodeFontExtents :: FontExtents
  inh nodeTextExtents :: {Text -> TextExtents}

  inh attrFont        :: FontOptions
  inh attrFontExtents :: FontExtents
  inh attrTextExtents :: {Text -> TextExtents}

attr Grammar Nonterminals Nonterminal Productions Production Connections
     Connection LocalsRows
  inh viewport :: {(Double, Double)}

attr Children Child LocalsRows Locals Attributes Attribute Node
  -- bounding box size
  syn bb :: {(Double, Double)}

  -- position (bottom left corner of bounding box)
  inh pos :: {(Double, Double)}

  -- used for drawing the lines between the nodes
  syn sources use {<>} {mempty} :: {Map Address (VerticalSide, (Double, Double))}
  syn targets use {<>} {mempty} :: {Map Address (VerticalSide, (Double, Double))}

attr Grammar Production Child Children LocalsRows Locals Connections Connection
     Attribute Attributes Node
  syn shapes use {<>} {mempty} :: {[Shape]}

attr Grammar Nonterminals Nonterminal Production
  inh requestedNont :: Text

attr Grammar Nonterminals Nonterminal Productions Production
  inh requestedProd :: Text

attr Nonterminals Nonterminal Productions Production
  syn responseProd use {<|>} {empty} :: {Maybe Production}

attr Production Children Child LocalsRows Locals Connections Connection 
     Attribute Attributes Node Rules Rule
  syn copy :: self

sem Nonterminal
  | Nonterminal +responseProd = {(\x -> if @lhs.requestedNont == @name then x else Nothing)}

sem Production
  | Production lhs.responseProd = if @lhs.requestedProd == @name then Just @loc.copy else Nothing

sem Grammar
  | Grammar
      inst.activeProd :: Production
      inst.activeProd = fromJust @nonts.responseProd

      lhs.shapes = if isJust @nonts.responseProd then @activeProd.shapes else []

attr Grammar Nonterminals Nonterminal Productions Production Children Child
  inh hideImplicit :: Bool
  inh enabledAttrs :: {Set Text}

attr Attribute Attributes
  inh location :: HorizontalSide
  inh fieldName :: Text

attr Attribute Attributes Node Child Children
  inh role :: {NodeRole}

attr Connections Connection
  inh sources :: {Map Address (VerticalSide, (Double, Double))}
  inh targets :: {Map Address (VerticalSide, (Double, Double))}

sem Attributes
  | Nil loc.bb = (0, 0)
  | Cons
      loc.bb = (@loc.w, @loc.h)
      loc.(w, h) = ( max (fst @tl.bb) (fst @hd.bb + snd @tl.bb)
                   , snd @tl.bb + snd @hd.bb
                   )
      tl.pos = ( fst @lhs.pos + if @lhs.location == SideRight
                                  then @loc.w - fst @tl.bb
                                  else 0
               , snd @lhs.pos - if @lhs.role == NodeRoleParent
                                  then snd @hd.bb
                                  else 0
               )
      hd.pos = ( fst @lhs.pos + if @lhs.location == SideRight
                                  then @loc.w - snd @tl.bb - fst @hd.bb
                                  else snd @tl.bb
               , snd @lhs.pos - if @lhs.role == NodeRoleChild
                                  then snd @tl.bb
                                  else 0
               )

sem Attribute
  | Attribute
      loc.bb = (@loc.w + 1.5 * @loc.h, @loc.h)
      loc.h = fontExtentsHeight @lhs.attrFontExtents
      (TextExtents loc.w) = @lhs.attrTextExtents @name
      loc.isTarget = (@lhs.location == SideRight)
                       == (@lhs.role == NodeRoleParent)
      loc.addPort = Map.insert (Address @lhs.fieldName @name) (if @lhs.role == NodeRoleParent then SideBottom else SideTop, (@loc.x, @loc.y))
     +sources = if @loc.isTarget then id else @loc.addPort
     +targets = if @loc.isTarget then @loc.addPort else id
      loc.x = fst @lhs.pos + if @lhs.location == SideLeft
                               then 0.5 * @loc.h
                               else @loc.w + @loc.h 
      loc.y = snd @lhs.pos - @loc.h / 2
     +shapes
       = ([ Disk (if @loc.isTarget
                    then RGB 0 (2 / 3) (3 / 4)
                    else RGB 1 (2 / 5) 0)
                 (@loc.x, @loc.y) 
                 (0.45 * @loc.h)
          , Text ( @loc.x + if @lhs.location == SideLeft
                              then @loc.h / 2
                              else - @loc.h / 2
                 , @loc.y
                 )
                 (if @lhs.location == SideLeft
                    then HorizontalAlignLeft
                    else HorizontalAlignRight)
                 VerticalAlignCenter
                 @lhs.attrFont
                 @name
          ] <>)

sem Node
  | Node 
      loc.ahgt = fontExtentsHeight @lhs.attrFontExtents
      loc.nhgt = fontExtentsHeight @lhs.nodeFontExtents
      (TextExtents loc.w) = @lhs.nodeTextExtents @name
      loc.bb = (@loc.bb_w, @loc.bb_h)
      (loc.bb_w, loc.bb_h)
        = let (xi, yi) = @inhs.bb
              (xs, ys) = @syns.bb
          in ( max @loc.w (abs (yi - ys) + max @loc.ahgt (xi + xs) + @loc.ahgt)
             , @loc.nhgt + max yi ys + if @loc.hasSource then @loc.ahgt else 0
             )
      loc.hasSource = @lhs.role == NodeRoleChild
      inhs.pos
        = let (x, y) = @lhs.pos
          in ( x + max 0 (snd @syns.bb - snd @inhs.bb)
             , y - if @lhs.role == NodeRoleParent
                     then 0
                     else @loc.nhgt + max 0 (snd @syns.bb - snd @inhs.bb)
             )
      syns.pos
        = let (x, y) = @lhs.pos
          in ( x + @loc.bb_w - fst @syns.bb - max 0 (snd @inhs.bb - snd @syns.bb)
             , y - if @lhs.role == NodeRoleParent
                 then 0
                 else @loc.nhgt + max 0 (snd @inhs.bb - snd @syns.bb)
             )
      loc.fieldName = @name
      (inhs.location, syns.location) = (SideLeft, SideRight)
      loc.portPos
        = ( fst @lhs.pos + @loc.bb_w / 2
          , snd @lhs.pos - @loc.bb_h + @loc.ahgt / 2
          )
      +sources
        = if @loc.hasSource
            then Map.insert (Address "loc" @name)
                            ( if @lhs.role == NodeRoleParent
                                then SideBottom
                                else SideTop
                            , @loc.portPos
                            )
            else id
      +shapes
        = let (x, y) = @lhs.pos
          in (([ PolyLine
                 (x, y - if @lhs.role == NodeRoleParent then @loc.bb_h else 0)
                 (let anh = max (snd @inhs.bb) (snd @syns.bb)
                          + if @loc.hasSource then @loc.ahgt / 2 else 0
                      nnh = @loc.nhgt
                      c = if @lhs.role == NodeRoleParent then 1 else -1
                  in [ (0                  , c * nnh)
                     , (anh                , c * anh)
                     , (@loc.bb_w - 2 * anh, 0)
                     , (anh                , -c * anh)
                     , (0                  , -c * nnh)
                     , (- @loc.bb_w        , 0)
                     ]
                 )
               , Text
                 ( x + @loc.bb_w / 2
                 , y - if @lhs.role == NodeRoleParent
                         then @loc.bb_h - @loc.nhgt
                         else 0
                 )
                 HorizontalAlignCenter
                 VerticalAlignBottom
                 @lhs.nodeFont
                 @name
               ]
               ++ if @loc.hasSource
                    then [Disk (RGB 1 (2 / 5) 0) @loc.portPos (0.45 * @loc.ahgt)]
                    else []
              ) <>)

sem Children
  | Nil lhs.bb = (0, 0)
  | Cons
      hd.pos = @lhs.pos
      tl.pos = let (x, y) = @lhs.pos in (x + 20 + fst @hd.bb, y)
      lhs.bb = let (x , y ) = @hd.bb 
                   (xs, ys) = @tl.bb
               in (x + 20 + xs, max y ys)

attr LocalsRows Locals
  inh side :: HorizontalSide

sem LocalsRows
  | Nil loc.bb = (0, 0)
  | Cons
      loc.bb
        = let ~(w1, h1) = @tl.bb
              ~(w2, h2) = @hd.bb
              ~(_ , h3) = @lhs.viewport
          in  (max w1 w2, h2 + if h1 > 0 then h1 + 0.1 * h3 else 0)
      hd.pos
        = let ~(x, y) = @lhs.pos
          in ( if @lhs.side == SideRight then x else x + fst @loc.bb - fst @hd.bb
             , y - (snd @tl.bb + if snd @tl.bb > 0 then 0.1 * snd @lhs.viewport else 0)
             )
      tl.pos
        = let ~(x, y) = @lhs.pos
          in ( if @lhs.side == SideRight
                then x
                else x + fst @loc.bb - fst @tl.bb
             , y)

sem Locals
  | Nil lhs.bb = (0, 0)
  | Cons
      loc.nhgt = fontExtentsHeight @lhs.nodeFontExtents
      loc.ahgt = fontExtentsHeight @lhs.attrFontExtents
      (TextExtents loc.w) = @lhs.nodeTextExtents @hd
      loc.bb = ( @loc.bb_w + if fst @tl.bb > 0 then fst @tl.bb + 20 else 0
               , max @loc.bb_h (snd @tl.bb)
               )
      loc.bb_w = @loc.w + @loc.ahgt
      loc.bb_h = 2 * @loc.ahgt + @loc.nhgt
      tl.pos = let ~(x, y) = @lhs.pos in (x + @loc.bb_w + 20, y)
      loc.sourcePos
        = let ~(x, y) = @lhs.pos
          in  ( x + @loc.bb_w / 2
              , y - if @lhs.side == SideRight then @loc.bb_h - @loc.ahgt else 0
              )
      loc.targetPos
        = let ~(x, y) = @lhs.pos
          in  ( x + @loc.bb_w / 2
              , y - if @lhs.side == SideLeft then @loc.bb_h - @loc.ahgt else 0
              )
      loc.insertLoc = Map.insert (Address "loc" @hd)
      +sources = @loc.insertLoc ( if @lhs.side == SideRight
                                    then SideTop
                                    else SideBottom
                                , @loc.sourcePos
                                )
      +targets = @loc.insertLoc ( if @lhs.side == SideRight
                                    then SideBottom
                                    else SideTop
                                , @loc.targetPos
                                )
      +shapes
        = let ~(x, y) = @lhs.pos
          in ([ PolyLine (x + @loc.ahgt / 2,y)
                         [ (@loc.w         , 0)
                         , (@loc.ahgt / 2  , - @loc.ahgt / 2)
                         , (0              , - @loc.nhgt)
                         , (- @loc.ahgt / 2, - @loc.ahgt / 2)
                         , (- @loc.w       , 0)
                         , (- @loc.ahgt / 2, @loc.ahgt / 2)
                         , (0              , @loc.nhgt)
                         , (@loc.ahgt / 2  , @loc.ahgt / 2)
                         ]
              , Disk (RGB 1 (2 / 5) 0) @loc.sourcePos (0.45 * @loc.ahgt)
              , Disk (RGB 0 (2 / 3) (3 / 4)) @loc.targetPos (0.45 * @loc.ahgt)
              , Text (x + @loc.ahgt / 2, y - @loc.ahgt / 2)
                     HorizontalAlignLeft
                     VerticalAlignBottom
                     @lhs.nodeFont
                     @hd
              ] <>)

-- Here we define the most important part of the layout.
-- The parent node is located at the top centered horizontally.
-- Then the right side of the left locals rows is aligned with the left side of
--   the parent node.
-- Symmetrically, the left side of the right locals rows is aligned with the
--   right side of the parent node. These locals rows are vertically centered.
-- At the bottom, the child nodes are horizontally centered.
--
-- Practically, we take the left side of the entire picture to be position 0
-- horizontally, so then the horizontal center is the width of the left locals
-- rows plus half the width of the parent node, or half the width of the
-- children whichever is greater.
--
-- Vertically, the bottom of the picture is at position 0. The height is
-- determined by the inherited 'viewport' attribute.

sem Production
  | Production
      loc.left = max (fst @leftLocalsRows.bb + fst @parent.bb / 2)
                     (fst @children.bb / 2)
      loc.right = max (fst @parent.bb / 2 + fst @rightLocalsRows.bb)
                      (fst @children.bb / 2)
      loc.w = @loc.left + @loc.right
      loc.h = snd @lhs.viewport
      loc.bb = (@loc.w, @loc.h)
      loc.pos = (0, @loc.h)
      loc.mid = @loc.left
      parent.pos
        = let ~(pw, ph) = @parent.bb
          in  (@loc.mid - pw / 2, 0.2 * @loc.h + ph / 2)
      parent.role = NodeRoleParent
      children.pos = @loc.childrenPos
      loc.childrenPos
        = let ~(cw, ch) = @children.bb
          in  (@loc.mid - cw / 2, 0.8 * @loc.h + ch / 2)
      children.role = NodeRoleChild
      leftLocalsRows.pos = @loc.leftLocalsRowsPos
      loc.leftLocalsRowsPos
        = let ~(lw, lh) = @leftLocalsRows.bb
              ~(pw, _ph) = @parent.bb
          in  (@loc.mid - pw / 2 - lw, @loc.h / 2 + lh / 2)
      rightLocalsRows.pos = @loc.rightLocalsRowsPos
      loc.rightLocalsRowsPos
        = let ~(lw, lh) = @rightLocalsRows.bb
              ~(pw, _ph) = @parent.bb
          in  (@loc.mid + pw / 2, @loc.h / 2 + lh / 2)
      -- connections.bb = @lhs.viewport
      connections.sources = mconcat [ @leftLocalsRows.sources
                                    , @rightLocalsRows.sources
                                    , @children.sources
                                    , @parent.sources
                                    ]
      connections.targets = mconcat [ @leftLocalsRows.targets
                                    , @rightLocalsRows.targets
                                    , @children.targets
                                    , @parent.targets
                                    ]
      loc.shapes = mconcat [ @connections.shapes
                           , @leftLocalsRows.shapes
                           , @rightLocalsRows.shapes
                           , @children.shapes
                           , @parent.shapes
                           ]
      leftLocalsRows.side = SideLeft
      rightLocalsRows.side = SideRight

sem Connection
  | Connection
      +shapes = case (,) <$> Map.lookup @source @lhs.sources <*> Map.lookup @target @lhs.targets of
                  Nothing -> id
                  Just ((s,(x,y)),(s',(x',y'))) -> 
                    ([ Bezier
                       (RGBA 0 0 0 (if @explicit then 1 else 0.2))
                       (x, y)
                       ( x
                       , if s == SideBottom
                         then y + 0.2 * snd @lhs.viewport
                         else y - 0.2 * snd @lhs.viewport
                       )
                       ( x'
                       , if s' == SideBottom
                         then y' + 0.2 * snd @lhs.viewport
                         else y' - 0.2 * snd @lhs.viewport
                       )
                       (x', y')
                     ] <>)

{
grammarShapes
  :: Cairo
  -> FontOptions
  -> FontExtents
  -> FontOptions
  -> FontExtents
  -> (Double, Double)
  -> Text     -- ^ nonterminal name
  -> Text     -- ^ production constructor name
  -> Bool     -- ^ hide implicit attributes
  -> Set Text -- ^ enabled attributes
  -> Grammar
  -> ([Shape], BBTree AttrInfo)
grammarShapes cairo nodeFont nodeFontExtents attrFont attrFontExtents viewport nont prod hideImplicit enabled gram
  = (shapes_Syn_Grammar wrapped, bbTree_Syn_Grammar wrapped)
 where
  wrapped = wrap_Grammar
    (sem_Grammar gram)
    Inh_Grammar { nodeFont_Inh_Grammar        = nodeFont
                , nodeFontExtents_Inh_Grammar = nodeFontExtents
                , nodeTextExtents_Inh_Grammar = textExtents cairo nodeFont
                , attrFont_Inh_Grammar        = attrFont
                , attrFontExtents_Inh_Grammar = attrFontExtents
                , attrTextExtents_Inh_Grammar = textExtents cairo attrFont
                , viewport_Inh_Grammar        = viewport
                , requestedNont_Inh_Grammar   = nont
                , requestedProd_Inh_Grammar   = prod
                , hideImplicit_Inh_Grammar    = hideImplicit
                , enabledAttrs_Inh_Grammar    = enabled
                }
}

-- Construct a bounding box tree to handle tooltip queries

attr BBTree BBForest
  inh queryPos :: {(Double, Double)}
  syn queryRes use {<|>} {empty} :: {Maybe a}

sem BBTree
  | BBNode +queryRes = if isInside @lhs.queryPos @bbPos @bbSize
                         then id
                         else const Nothing
  | BBLeaf lhs.queryRes = if isInside @lhs.queryPos @bbPos @bbSize
                            then Just @value
                            else Nothing

{
isInside :: (Double, Double) -> (Double, Double) -> (Double, Double) -> Bool
isInside (x1, y1) (x2, y2) (dx, dy) =
  (x2 <= x1 && x1 <= x2 + dx) && (y2 >= y1 && y1 >= y2 - dy)

lookupBBTree :: (Double, Double) -> BBTree a -> Maybe a
lookupBBTree point tree = queryRes_Syn_BBTree
  (wrap_BBTree (sem_BBTree tree) Inh_BBTree { queryPos_Inh_BBTree = point })

lookupBBForest :: (Double, Double) -> BBForest a -> Maybe a
lookupBBForest point forest = queryRes_Syn_BBForest
  (wrap_BBForest (sem_BBForest forest)
                 Inh_BBForest { queryPos_Inh_BBForest = point }
  )

data AttrInfo
  = TargetInfo
    { targetInfoType   :: Type
    , targetInfoCode   :: Text
    , targetInfoOrigin :: Text
    }
  | SourceInfo
    { sourceInfoType :: Type
    }
}

attr Rules Rule
  syn targetInfoMap use {<>} {mempty} :: {Map Address (Text, Text)}

sem Production
  | Production
      children.targetInfoMap = @rules.targetInfoMap
      parent.targetInfoMap = @rules.targetInfoMap
      leftLocalsRows.targetInfoMap = @rules.targetInfoMap
      rightLocalsRows.targetInfoMap = @rules.targetInfoMap

sem Rule
  | Rule lhs.targetInfoMap
           = Map.fromList [(x, (@definition, @origin)) | x <- @targets]

attr LocalsRows Locals Children Child Node Attributes Attribute
  inh targetInfoMap :: {Map Address (Text, Text)}

attr Grammar Production Child Attribute Node
  syn bbTree :: {BBTree AttrInfo}

attr Children LocalsRows Locals Attributes
  syn bbForest use {++} {[]} :: {BBForest AttrInfo}

sem Node
  | Node lhs.bbTree = BBNode @lhs.pos @loc.bb (@inhs.bbForest ++ @syns.bbForest)

sem Attributes
  | Cons lhs.bbForest = @hd.bbTree : @tl.bbForest

sem Attribute
  | Attribute
      loc.targetInfo = @lhs.targetInfoMap Map.!? Address @lhs.fieldName @name
      loc.attrInfo
        = case @loc.targetInfo of
            Just (code, origin) | @loc.isTarget -> TargetInfo @tp code origin
            _ -> SourceInfo @tp
      lhs.bbTree = BBLeaf @lhs.pos @loc.bb @loc.attrInfo

sem LocalsRows
  | Cons lhs.bbForest = BBNode @lhs.pos @loc.bb @hd.bbForest : @tl.bbForest

sem Locals
  | Nil lhs.bbForest = []
  | Cons
      loc.targetInfo = @lhs.targetInfoMap Map.!? Address "loc" @hd
      loc.attrInfo
        = case @loc.targetInfo of
            Just (code, origin) -> TargetInfo (Haskell "") code origin
            _ -> SourceInfo (Haskell "")
      +bbForest = (BBLeaf @lhs.pos (@loc.bb_w, @loc.bb_h) @loc.attrInfo :)

sem Production
  | Production
      lhs.bbTree
        = BBNode @loc.pos @loc.bb
            [ @parent.bbTree
            , BBNode @loc.childrenPos @children.bb @children.bbForest
            , BBNode @loc.leftLocalsRowsPos @leftLocalsRows.bb @leftLocalsRows.bbForest
            , BBNode @loc.rightLocalsRowsPos @rightLocalsRows.bb @rightLocalsRows.bbForest
            ]
